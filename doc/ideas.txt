PHYSICS
=======
- units: use SI for everything

CLOUDS
======
- Worley noise - see Hogfeldt thesis, should be fairly easy to implement
- cloud/cloud shadows are generated by raymarching toward sun using an exponentially increasing step-size
	- see Hogfeldt thesis
	- see ComputeSunColor function, just need to compute extinction factor and multiply by sun color
- to render, use alpha-blending with "background"
	- how to ensure correct rendering order? 
	- could test if start of atmosphere is in front or behind background:
	eye ---> atmosphere start ---> fragment position : do alpha blending
	eye ---> fragment position ---> atmosphere start : no alpha blending
	!!! this assumes that the atmosphere is completely above terrain
	- ftp://ftp.sgi.com/opengl/contrib/blythe/advanced99/notes/node118.html

TERRAIN
=======
- model as a height-map z(x,y)
  - collision detection: test if lowest point of dynamic object bounding box is below elevation
- object collisions only require query of heightmap at arbitrary points
- procedural terrain:
  - periodic background mesh (read in or generated)
  - procedural "noise"

Geomipmapping:
- generate terrain tiles such that d_tile < d_view
  - d_tile is distance from far edge of tile to camera
  - d_view is maximum view distance determined by min(d_fog, d_frustrum, d_vanish)
    where d_vanish is the distance such that a terrain tile is < 1 pixel
- compute (x,z) coordinates once, translate to correct location for each tile
- compute normals for all coordinates, and sample to coarser grid via restriction
- precompute triangle-strip indices for all mipmap configurations up to max level
  - generate C triangles and then NESW triangles around C (see Broderson)
  - accessor for indices should look like (int lod, int lod_n, int lod_e, int lod_s, int lod_w)

Frustrum Culling:
- generate 3D AABB around each terrain tile, render tile if AABB is inside camera frustrum
  - form AABB when generating tile data
- use quadtree to quickly determine visible tiles
  - nodes have AABB computed from 4 sub-nodes (compute from bottom up)
  - leafs have pointers to tiles
  - start from top of tree (entire terrain)
  - if AABB intersects the frustrum, search all child nodes
  - continue until AABB at a node doesn't intersect frustrum

CODE STRUCTURE
==============
Terrain
StationaryEntity
DynamicEntity (template on n-dof)
 - RigidBody (position/orientation)
 - PointBody (position)
 - Spring (position)

Object properties
- drawable
- collidable (with DynamicObjects)
- audible
- controllable (by AI or player)

Components: for each object property, make a class
- GameObject is a composition of component objects
- Use a factory to build GameObjects based on properties
- Camera could be a GameObject, since it might be collidable

DrawComponent
DynamicsComponent - update position/orientation of object
CollideComponent - determine if collision occurs, compute resulting forces
SoundComponent
AIComponent

ComponentManagers:
- Great for multi-threading: give each domain (Drawing, physics, audio) a different thread
- GameObject base class gets reference to all ComponentManagers, registers appropriate component

DrawComponentManager
- loops through GameObjects, figures out which should be drawn (e.g. based on camera frustrum), and calls Draw() if they are visible

DynamicsComponentManager
- loops through GameObjects, and updates positions/orientations (e.g. using RK4)
- probably should vectorize RK4, i.e. move all state vector to contiguous memory and update, then move data back

Data Locality: store all components of a given type in a long STATIC vector
- active components at the front, inactive at the back
- when a component becomes inactive, switch positions with last active component:
- loops over active components will touch contiguous memory

Keep track of first inactive index:
[a][a][a][a][a][i][i][i][i]
                ^
                FI

Component 3 becomes inactive:
[a][a][i][a][a][i][i][i][i]

Swap with last active component:
[a][a][i][a][a][i][i][i][i]
       ^     ^
       |_____|

Update first inactive index:
[a][a][a][a][i][i][i][i][i]
             ^
             FI

        








