PHYSICS
=======
- units: use SI for everything

TERRAIN
=======
- model as a height-map z(x,y)
  - collision detection: test if lowest point of dynamic object bounding box is below elevation
- object collisions only require query of heightmap at arbitrary points
- procedural terrain:
  - periodic background mesh (read in or generated)
  - procedural "noise"

Geomipmapping:


Frustrum Culling:
- generate 3D AABB around each terrain tile, render tile if AABB is inside camera frustrum
  - form AABB when generating tile data (rebuild whenever tile is updated)

CODE STRUCTURE
==============
Terrain
StationaryEntity
DynamicEntity (template on n-dof)
 - RigidBody (position/orientation)
 - PointBody (position)
 - Spring (position)

Object properties
- drawable
- collidable (with DynamicObjects)
- audible
- controllable (by AI or player)

Components: for each object property, make a class
- GameObject is a composition of component objects
- Use a factory to build GameObjects based on properties
- Camera could be a GameObject, since it might be collidable

DrawComponent
DynamicsComponent - update position/orientation of object
CollideComponent - determine if collision occurs, compute resulting forces
SoundComponent
AIComponent

ComponentManagers:
- Great for multi-threading: give each domain (Drawing, physics, audio) a different thread
- GameObject base class gets reference to all ComponentManagers, registers appropriate component

DrawComponentManager
- loops through GameObjects, figures out which should be drawn (e.g. based on camera frustrum), and calls Draw() if they are visible

DynamicsComponentManager
- loops through GameObjects, and updates positions/orientations (e.g. using RK4)
- probably should vectorize RK4, i.e. move all state vector to contiguous memory and update, then move data back

Data Locality: store all components of a given type in a long STATIC vector
- active components at the front, inactive at the back
- when a component becomes inactive, switch positions with last active component:
- loops over active components will touch contiguous memory

Keep track of first inactive index:
[a][a][a][a][a][i][i][i][i]
                ^
                FI

Component 3 becomes inactive:
[a][a][i][a][a][i][i][i][i]

Swap with last active component:
[a][a][i][a][a][i][i][i][i]
       ^     ^
       |_____|

Update first inactive index:
[a][a][a][a][i][i][i][i][i]
             ^
             FI

        








